




1. Single Underscore _ as a Throwaway Variable

Ever need to loop through something just for its side effects and don’t care about the actual value? Enter the underscore.

for _ in range(5):
    print("Hello, world!")

	Here, _ indicates that the loop variable is intentionally unused.
 It's a subtle signal to readers: “Hey, I don’t care about this value.” 
 Python doesn’t enforce this, but it’s a clean, readable convention that shows you're being
 intentional.
 
 
2. Single Underscore in the Interpreter
When you’re working in the Python REPL or interactive shell, _ holds the result of the last executed expression. It’s like a built-in memory buffer.

>>> 10 + 20
30
>>> _ * 2
60
Super handy for quick calculations, experiments, or just being lazy in a good way.



3.Underscore in Numeric Literals
Python 3.6+ lets you add underscores to numbers for better readability.

population = 1_400_000_000
price = 49_999.99
It’s still just an int or float under the hood, but now your code is way more readable. 
Pro tip: Great for working with financial data, large IDs, or memory sizes.


4. Underscore in Pattern Matching (Python 3.10+)
If you’re using Python 3.10 or newer, you’re in for a treat with structural pattern matching.

def handle_point(point):
    match point:
        case (0, 0):
            print("Origin")
        case (_, 0):
            print("X-axis")
        case (0, _):
            print("Y-axis")
        case (_, _):
            print("Somewhere else")
			
			
			
7. Underscore in Pattern Matching (Python 3.10+)
If you’re using Python 3.10 or newer, you’re in for a treat with structural pattern matching.

def handle_point(point):
    match point:
        case (0, 0):
            print("Origin")
        case (_, 0):
            print("X-axis")
        case (0, _):
            print("Y-axis")
        case (_, _):
            print("Somewhere else")
The _ acts as a wildcard pattern—matching anything without binding the value. 
Think of it like default: in a switch statement but even cleaner.


def string_match(str):
    match str:
        case 'imman':
            print('name is imman')
        case 'ebenezer':
            print('name is ebenezer')
        case _:
            print('name not found')